#!/sbin/sh
#
# Copyright (C) 2025-26 https://github.com/ArKT-7
#
# Made for flash Android rom in recovery for Xiaomi Pad 5 (Nabu)
#

UPD_ZIP="$3"
UPD_INTERFACE="/proc/self/fd/$2"
UPD_TEMP_FOLDER="/dev/tmp/arkt"

set -o pipefail

ui_print() {
    while [ -n "$1" ]; do
        if [ -n "$UPD_INTERFACE" ] && [ -w "$UPD_INTERFACE" ]; then
            echo "ui_print $1" >> "$UPD_INTERFACE"
            echo "ui_print" >> "$UPD_INTERFACE"
        else
            echo "Warning: UPD_INTERFACE ($UPD_INTERFACE) is not writable" >&2
        fi
        shift
    done
}

current_progress=0.0
aio_progress() {
    if [ $# -ne 2 ]; then
        ui_print "Error: aio_progress expects 2 arguments, got $#"
        ui_print "Usage: aio_progress <target_fraction> <duration_in_seconds>"
        return 1
    fi
    target="$1"
    duration="$2"
    if ! echo "$target" | grep -Eq '^[0-9]+([.][0-9]+)?$'; then
        ui_print "Error: Target value '$target' is not a valid number"
        return 1
    fi
    if ! echo "$duration" | grep -Eq '^[0-9]+([.][0-9]+)?$'; then
        ui_print "Error: Duration value '$duration' is not a valid number"
        return 1
    fi
    delta=$(awk "BEGIN { print $target - $current_progress }")
    echo "progress $delta $duration" >> "$UPD_INTERFACE"
    current_progress=$target
}

package_extract_file() {
    if [ $# -ne 2 ]; then
        ui_print " package_extract_file expects 2 arguments, got $#"
        ui_print " Usage: package_extract_file <src-file> <dst-file>"
        return 1
    fi
    command -v unzip >/dev/null || { ui_print "Error: unzip not found"; return 1; }
    unzip -p "$UPD_ZIP" "$1" > "$2" || {
        ui_print " Failed to extract $1"
        return 1
    }
}

package_extract_image() {
    if [ $# -ne 2 ]; then
        ui_print " package_extract_image expects 2 arguments, got $#"
        ui_print " Usage: package_extract_image <src-file> <dst-file>"
        return 1
    fi
    if ! [ -f "$UPD_TEMP_FOLDER/busybox" ]; then
        ui_print " Error: BusyBox not found at $UPD_TEMP_FOLDER/busybox"
        return 1
    fi
    "$UPD_TEMP_FOLDER/busybox" unzip -p "$UPD_ZIP" "$1" > "$2" || {
        ui_print " Failed to extract image $1"
        return 1
    }
}


flash_image() {
    local image_name=$1
    local partition=$2
    local progress_start=$3
    local progress_duration=$4
    ui_print " Flashing ${image_name} image.."
    package_extract_image "images/${image_name}.img" "/dev/block/platform/soc/1d84000.ufshc/by-name/${partition}_a"
    package_extract_image "images/${image_name}.img" "/dev/block/platform/soc/1d84000.ufshc/by-name/${partition}_b"
    ui_print " "
    set_progress $progress_start
    progress 0.10 $progress_duration
}


change_slot() {
    local slot=$1
    
    if [ "$slot" == "a" ]; then
        LD_PRELOAD=$UPD_TEMP_FOLDER/libhidltransport.so:$UPD_TEMP_FOLDER/libhwbinder.so $UPD_TEMP_FOLDER/bootctl set-active-boot-slot 0
    elif [ "$slot" == "b" ]; then
        LD_PRELOAD=$UPD_TEMP_FOLDER/libhidltransport.so:$UPD_TEMP_FOLDER/libhwbinder.so $UPD_TEMP_FOLDER/bootctl set-active-boot-slot 1
    else
        ui_print " Invalid slot: $slot"
    fi
	#OUTPUT=$(LD_PRELOAD=$UPD_TEMP_FOLDER/libhidltransport.so:$UPD_TEMP_FOLDER/libhwbinder.so $UPD_TEMP_FOLDER/bootctl get-current-slot 2>&1)  # Capturing output
    #ui_print "$OUTPUT"
}

check_file_and_hash() {
    local file_path="$1"
    local expected_hash="$2"

    if ! unzip -l "$UPD_ZIP" | grep -q " $file_path$"; then
	    ui_print " "
        ui_print " Error: $file_path not found in the auto-installer package!"
		ui_print " "
        ui_print " Your download may be corrupted. Please download again."
        ui_print " If the issue persists, pls send a screenshot in the group for help."
		ui_print ""
        exit 1
    fi
    local actual_hash
    actual_hash=$(unzip -p "$UPD_ZIP" "$file_path" | $UPD_TEMP_FOLDER/busybox sha256sum | $UPD_TEMP_FOLDER/busybox awk '{print $1}')
    if [ "$actual_hash" != "$expected_hash" ]; then
	ui_print " "
        ui_print " SHA-256 mismatch for $file_path!"
	ui_print " "
        ui_print " Expected: $expected_hash"
        ui_print " Got: $actual_hash"
	ui_print " "
        ui_print " Your download may be corrupted. Please download again."
        ui_print " If the issue persists, pls send a screenshot in the group for help."
	ui_print " "
        exit 1
    fi
    #ui_print "SHA-256 verification passed for $file_path"
	#ui_print " "
}

check_file() {
    local file_path="$1"

    if ! unzip -l "$UPD_ZIP" | grep -q " $file_path$"; then
	    ui_print " "
        ui_print " Error: $file_path not found in the auto-installer package!"
		ui_print " "
        ui_print " Your download may be corrupted. Please download again."
        ui_print " If the issue persists, pls send a screenshot in the group for help."
		ui_print ""
        exit 1
    fi
}

volumekey() {
  while true; do
    getevent -lc 1 2>&1 | grep VOLUME | grep " DOWN" > "$UPD_TEMP_FOLDER/events"
    if grep -q "VOLUMEUP" "$UPD_TEMP_FOLDER/events"; then
      return 0
    elif grep -q "VOLUMEDOWN" "$UPD_TEMP_FOLDER/events"; then
      return 1
    fi
  done
}

navigate_menu() {
  options=("$@")
  count=${#options[@]}
  selection=0
  ui_print "----------------------------------------------------"
  ui_print "  Use Volume up to navigate, Volume down to select. "
  ui_print "----------------------------------------------------"
  while true; do
    # Print the menu
    ui_print " "
    for i in $($UPD_TEMP_FOLDER/busybox seq 0 $((count - 1))); do
      if [ "$i" -eq "$selection" ]; then
        ui_print "> ${options[i]}"
      else
        ui_print "  ${options[i]}"
      fi
    done
    if volumekey; then
      selection=$(( (selection + 1) % count )) # Navigate up
    else
      ui_print " "
	  ui_print "----------------------------------------------------"
      ui_print " You selected: ${options[selection]}"
      ui_print "----------------------------------------------------"
      break
    fi
  done
}


rm -rf "$UPD_TEMP_FOLDER"
mkdir -p "$UPD_TEMP_FOLDER"

package_extract_file "META-INF/com/google/android/updater-script" "$UPD_TEMP_FOLDER/updater-script" || {
    ui_print "Cannot extract updater-script. Do you have it in package?"
    exit 1
}

chmod 777 "$UPD_TEMP_FOLDER/updater-script"
package_extract_file "META-INF/com/arkt/bootctl" "$UPD_TEMP_FOLDER/bootctl"
chmod 0777 "$UPD_TEMP_FOLDER/bootctl"
package_extract_file "META-INF/com/arkt/libhidltransport.so" "$UPD_TEMP_FOLDER/libhidltransport.so"
chmod 0777 "$UPD_TEMP_FOLDER/libhidltransport.so"
package_extract_file "META-INF/com/arkt/libhwbinder.so" "$UPD_TEMP_FOLDER/libhwbinder.so"
chmod 0777 "$UPD_TEMP_FOLDER/libhwbinder.so"
package_extract_file "META-INF/com/arkt/busybox" "$UPD_TEMP_FOLDER/busybox"
chmod 0777 "$UPD_TEMP_FOLDER/busybox"

# Source the updater-script (Only if it's a valid shell script)
if grep -q "^#!/" "$UPD_TEMP_FOLDER/updater-script"; then
    . "$UPD_TEMP_FOLDER/updater-script" "$@"
else
    ui_print "Error: updater-script is not a shell script"
    exit 1
fi
exit $?
