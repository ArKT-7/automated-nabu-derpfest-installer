#!/sbin/sh
#
# Copyright (C) 2025-26 https://github.com/ArKT-7/Auto-Installer-Forge
#
# Made for flashing Android ROMs in recovery easily
#

UPD_ZIP="$3"
UPD_INTERFACE="/proc/self/fd/$2"
UPD_TEMP_FOLDER="/tmp/arkt"
CONFIG_FILE="$UPD_TEMP_FOLDER/autoinstaller.conf"

set -o pipefail

ui_print() {
  while [ -n "$1" ]; do
    if [ -n "$UPD_INTERFACE" ] && [ -w "$UPD_INTERFACE" ]; then
      echo "ui_print $1" >> "$UPD_INTERFACE"
        echo "ui_print" >> "$UPD_INTERFACE"
      else
        echo "Warning: UPD_INTERFACE ($UPD_INTERFACE) is not writable" >&2
      fi
    shift
  done
}

print_centered() {
  local text="$1"
  # Use the second argument (if provided) or fall back to char_width, defaulting to 60
  local width="${2:-${CHAR_WIDTH:-60}}"
  local inner_width=$((width - 2))
  local text_length=${#text}
  while [ ${#text} -gt $inner_width ]; do
    local line="${text:0:$inner_width}"
    text="${text:$inner_width}"
    print_centered_line "$line" "$width"
  done
  print_centered_line "$text" "$width"
}

print_centered_line() {
  local text="$1"
  local width="$2"
  local inner_width=$((width - 2))
  local text_length=${#text}
  if [ "$text_length" -gt "$inner_width" ]; then
    text="${text:0:$inner_width}" 
    text_length=${#text}
  fi
  local padding_total=$((inner_width - text_length))
  local left_padding=$((padding_total / 2))
  local right_padding=$((padding_total - left_padding))
  local line=" "
  while [ "$left_padding" -gt 0 ]; do
    line+=" "
    left_padding=$((left_padding - 1))
  done
  line+="$text"
  while [ "$right_padding" -gt 0 ]; do
    line+=" "
    right_padding=$((right_padding - 1))
  done
  line+=" "
  ui_print "$line"
}

nl_print_centered() { print_centered "$1"; ui_print " ";}
ln_print_centered() { ui_print " "; print_centered "$1";}
nln_print_centered() { ui_print " "; print_centered "$1"; ui_print " ";}
print_exit() { ui_print " "; ui_print "$BANNER_EXIT";}

print_line() {
  local char="${1:-=}"
  local width="${CHAR_WIDTH:-60}"
  local line=" "
  for _ in $(seq 1 "$width"); do
    line="${line}${char}"
  done
  line="${line} "
  ui_print "$line"
}

abort() {
  print_exit
  nl_print_centered "$1"
  exit 1
}

current_progress=0.0
aio_progress() {
  if [ $# -ne 2 ]; then
    ui_print " Error: aio_progress expects 2 arguments, got $#"
    ui_print " Usage: aio_progress <target_fraction> <duration_in_seconds>"
    return 1
  fi
  target="$1"
  duration="$2"
  if ! echo "$target" | grep -Eq '^[0-9]+([.][0-9]+)?$'; then
    ui_print " Error: Target value '$target' is not a valid number"
    return 1
  fi
  if ! echo "$duration" | grep -Eq '^[0-9]+([.][0-9]+)?$'; then
    ui_print " Error: Duration value '$duration' is not a valid number"
    return 1
  fi
  echo "set_progress $current_progress" >> "$UPD_INTERFACE"
  sleep 0.05
  delta=$(bb awk "BEGIN { print $target - $current_progress }")
  echo "progress $delta $duration" >> "$UPD_INTERFACE"
  current_progress=$target
}

package_extract_folder() {
  if [ $# -ne 2 ]; then
    ui_print " Error: package_extract_folder expects 2 arguments, got $#"
    ui_print " Usage: package_extract_folder <src-folder> <dst-folder>"
    return 1
  fi
  local src="$1"
  local dst="$2"
  command -v unzip >/dev/null || { ui_print " Error: unzip not found"; return 1; }
  mkdir -p "$dst"
  unzip -o "$UPD_ZIP" "$src/*" -d "$dst" >/dev/null 2>&1 || {
  ui_print " Failed to extract folder: $src"
  return 1
  }
}

package_extract_file() {
  if [ $# -ne 2 ]; then
    ui_print " Error: package_extract_file expects 2 arguments, got $#"
    ui_print " Usage: package_extract_file <src-file> <dst-file>"
    return 1
  fi
  command -v unzip >/dev/null || { ui_print " Error: unzip not found"; return 1; }
  if ! unzip -l "$UPD_ZIP" "$1" | grep -q "$1"; then
    ui_print " Error: File '$1' not found in package"
    return 1
  fi
  if ! unzip -p "$UPD_ZIP" "$1" > "$2"; then
    ui_print " Failed to extract $1"
    return 1
  fi
}

package_extract_image() {
    if [ $# -ne 2 ]; then
        ui_print " package_extract_image expects 2 arguments, got $#"
        ui_print " Usage: package_extract_image <src-file> <dst-file>"
        return 1
    fi
    if ! [ -f "$UPD_TEMP_FOLDER/busybox" ]; then
        ui_print " Error: BusyBox not found at $UPD_TEMP_FOLDER/busybox"
        return 1
    fi
    bb unzip -p "$UPD_ZIP" "$1" > "$2" || {
        ui_print " Failed to extract image $1"
        return 1
    }
}

verify_device() {
  current="$(getprop ro.product.device)"
  if [ "$current" != "$DEVICE_CODE" ]; then
    print_exit
    print_centered "This script is only for $DEVICE_CODE devices."
    nl_print_centered "Your device is: $current"
    exit 1
  fi
}

volumekey_timeout() {
  : > "$UPD_TEMP_FOLDER/events"
  : > "$UPD_TEMP_FOLDER/raw_events"
  getevent -lc 1 2>&1 > "$UPD_TEMP_FOLDER/raw_events" &
  pid=$!
  sleep 1
  kill -0 $pid 2>/dev/null && kill $pid 2>/dev/null
  grep VOLUME "$UPD_TEMP_FOLDER/raw_events" | grep " DOWN" > "$UPD_TEMP_FOLDER/events"
  if grep -q "VOLUMEUP" "$UPD_TEMP_FOLDER/events"; then
    echo "Volume Up detected" >> "$UPD_TEMP_FOLDER/debug.log"
    return 1
  elif grep -q "VOLUMEDOWN" "$UPD_TEMP_FOLDER/events"; then
    echo "Volume Down detected" >> "$UPD_TEMP_FOLDER/debug.log"
    return 0
  fi
  echo "No key detected" >> "$UPD_TEMP_FOLDER/debug.log"
  return 2  
}

navigate_menu_timeout() {
  options=("$@")
  count=${#options[@]}
  selection=0
  start_time=$(date +%s)
  timeout_duration="${SELECTION_TIMEOUT:-10}"
  last_selection=-1
  last_countdown=-1
  print_line -
  print_centered "Use Volume down to select/change options"
  print_centered "Use Volume up to confirm"
  print_centered "Auto-confirm in $timeout_duration seconds..."
  print_line -
  ui_print " "
  for i in $(seq 0 $((count - 1))); do
    if [ "$i" -eq "$selection" ]; then
      ui_print " -> ${options[i]} <-"
    else
      ui_print "    ${options[i]}"
    fi
  done
  last_selection=$selection
  while true; do
    current_time=$(date +%s)
    elapsed_time=$((current_time - start_time))
    remaining_time=$((timeout_duration - elapsed_time))
    if [ "$remaining_time" -ne "$last_countdown" ] && [ "$remaining_time" -ge 0 ]; then
      #ui_print "Auto-proceed in $remaining_time seconds..." # (for logging)
      last_countdown=$remaining_time
    fi
    if [ "$elapsed_time" -ge "$timeout_duration" ]; then
      #ui_print " "
      #print_line -
      #print_centered "Auto-selected: ${options[selection]}"
      #print_line -
      ui_print " "
      print_line
      break
    fi
    volumekey_timeout
    key_result=$?
    if [ $key_result -eq 0 ]; then
      selection=$(( (selection + 1) % count ))
      start_time=$(date +%s)  # reset timeout on key press
      if [ "$selection" -ne "$last_selection" ]; then
        ui_print " "
        for i in $(seq 0 $((count - 1))); do
          if [ "$i" -eq "$selection" ]; then
            ui_print " -> ${options[i]} <-"
          else
            ui_print "    ${options[i]}"
          fi
        done
        last_selection=$selection
      fi
    elif [ $key_result -eq 1 ]; then
      #ui_print " "
      #print_line
      #print_centered "You selected: ${options[selection]}"
      #print_line
      ui_print " "
      print_line
      break
    fi
  done
  return $selection
}

print_ascii() {
  for line in "${ASCII_ART_LINES[@]}"; do
    print_centered "$line"
  done
}

file_checksum() {
local i=0
while [ $i -lt ${#HASH_PAIRS[@]} ]; do
  file="${HASH_PAIRS[$i]}"
  hash="${HASH_PAIRS[$((i + 1))]}"
  check_file_and_hash "$file" "$hash"
  i=$((i + 2))
done
}

bb() { "$UPD_TEMP_FOLDER/busybox" "$@"; }

flash_image() {
    local image_name=$1
    local partition=$2
    local progress_start=$3
    local progress_duration=$4
    ui_print "    Flashing ${image_name} image.."
    aio_progress $progress_start 0
    aio_progress 0.10 $progress_duration
    package_extract_image "images/${image_name}.img" "/dev/block/platform/soc/1d84000.ufshc/by-name/${partition}_a"
    package_extract_image "images/${image_name}.img" "/dev/block/platform/soc/1d84000.ufshc/by-name/${partition}_b"
    ui_print " "
}

change_slot() {
    local slot=$1
    if [ "$slot" == "a" ]; then
        LD_PRELOAD=$UPD_TEMP_FOLDER/libhidltransport.so:$UPD_TEMP_FOLDER/libhwbinder.so $UPD_TEMP_FOLDER/bootctl set-active-boot-slot 0
    elif [ "$slot" == "b" ]; then
        LD_PRELOAD=$UPD_TEMP_FOLDER/libhidltransport.so:$UPD_TEMP_FOLDER/libhwbinder.so $UPD_TEMP_FOLDER/bootctl set-active-boot-slot 1
    else
        ui_print " Invalid slot: $slot"
    fi
	#OUTPUT=$(LD_PRELOAD=$UPD_TEMP_FOLDER/libhidltransport.so:$UPD_TEMP_FOLDER/libhwbinder.so $UPD_TEMP_FOLDER/bootctl get-current-slot 2>&1)  # Capturing output
    #ui_print "$OUTPUT"
}

check_file() {
    local file_path="$1"

    if ! bb unzip -l "$UPD_ZIP" | grep -q " $file_path$"; then
	    print_exit
        print_centered " File: $file_path not found in package!"
        print_line -
        print_centered "Your download zip might be corrupted." 
        print_centered "Please download again and retry."
        nl_print_centered "if Still same issue, Post a screenshot in the group."
        exit 1
    fi
}

check_file_and_hash() {
    local file_path="$1"
    local expected_hash="$2"

    if ! unzip -l "$UPD_ZIP" | grep -q " $file_path$"; then
	    print_exit
        print_centered " File: $file_path not found in package!"
        print_line -
        print_centered "Your download zip might be corrupted." 
        print_centered "Please download again and retry."
        nl_print_centered "if Still same issue, Post a screenshot in the group."
        exit 1
    fi
    local actual_hash
    actual_hash=$(unzip -p "$UPD_ZIP" "$file_path" | bb sha1sum | bb awk '{print $1}')
    if [ "$actual_hash" != "$expected_hash" ]; then
	print_exit
        print_centered "SHA-1 mismatch for $file_path!"
        print_line -
        print_centered "Expected SHA-1 hash:"
        print_centered "$expected_hash"
        print_centered "current file Got:"
        print_centered "$actual_hash"
        print_line -
        ln_print_centered "Your download zip might be corrupted." 
        print_centered "Please download again and retry."
        nl_print_centered "if Still same issue, Post a screenshot in the group."
        exit 1
    fi
    #ui_print "SHA-1 verification passed for $file_path"
	#ui_print " "
}

flash_boot_menu() {
  menu_options=()
  i=0
  while [ $i -lt ${#root_options_filename[@]} ]; do
    num=$((i / 3 + 1))
    label="${root_options_filename[$i]}"
    menu_options+=("Option $num: $label")
    i=$((i + 3))
  done
  cancel_index=$(( ${#root_options_filename[@]} / 3 + 1 ))
  menu_options+=("Option $cancel_index: Cancel Flashing ROM")
  navigate_menu_timeout "${menu_options[@]}"
  if [ "$selection" -eq "${#menu_options[@]}" -o "$selection" -eq $((${#menu_options[@]} - 1)) ]; then
    ui_print " "
    ui_print "    Okay, see u soon! XD"
    ui_print " "
    bb rm -rf "$UPD_TEMP_FOLDER"
    exit
  fi
  sel_index=$((selection * 3 + 1))
  boot_img="${root_options_filename[$sel_index]}"
  dtbo_img="${root_options_filename[$((sel_index + 1))]}"
  for image in "$boot_img" "$dtbo_img"; do
    if ! bb unzip -l "$UPD_ZIP" | grep -q "images/$image.img"; then
      print_exit
      print_centered " File '$image.img' not found!"
      print_centered "Please check (autoinstaller.conf) file"
      nl_print_centered "If still same issue, post a screenshot in the group."
      exit 1
    fi
  done
  ui_print " "
  flash_image "$boot_img" "boot" 0.02 4
  flash_image "$dtbo_img" "dtbo" 0.02 4
  change_slot a
}

rm -rf "$UPD_TEMP_FOLDER"
mkdir -p "$UPD_TEMP_FOLDER"

package_extract_file "META-INF/autoinstaller.conf" "$CONFIG_FILE" || {
    ui_print " "
    ui_print " autoinstaller Configuration file not found or empty" 
    ui_print " Make sure you have a file (autoinstaller.conf)" 
    ui_print " it must be in "META-INF" Folder with all configration" 
    ui_print " "
    exit 1
}
chmod 777 "$UPD_TEMP_FOLDER/autoinstaller.conf"

package_extract_file "META-INF/com/google/android/updater-script" "$UPD_TEMP_FOLDER/updater-script" || {
    ui_print " Cannot extract updater-script. Do you have it in package?"
    exit 1
}
chmod 777 "$UPD_TEMP_FOLDER/updater-script"

package_extract_file "META-INF/com/arkt/bootctl" "$UPD_TEMP_FOLDER/bootctl"
chmod 0777 "$UPD_TEMP_FOLDER/bootctl"
package_extract_file "META-INF/com/arkt/libhidltransport.so" "$UPD_TEMP_FOLDER/libhidltransport.so"
chmod 0777 "$UPD_TEMP_FOLDER/libhidltransport.so"
package_extract_file "META-INF/com/arkt/libhwbinder.so" "$UPD_TEMP_FOLDER/libhwbinder.so"
chmod 0777 "$UPD_TEMP_FOLDER/libhwbinder.so"
package_extract_file "META-INF/com/arkt/busybox" "$UPD_TEMP_FOLDER/busybox"
chmod 0777 "$UPD_TEMP_FOLDER/busybox"
package_extract_file "META-INF/com/arkt/dmsetup" "$UPD_TEMP_FOLDER/dmsetup"
chmod 0777 "$UPD_TEMP_FOLDER/dmsetup"
package_extract_file "META-INF/com/arkt/make_f2fs" "$UPD_TEMP_FOLDER/make_f2fs"
chmod 0777 "$UPD_TEMP_FOLDER/make_f2fs"
package_extract_file "META-INF/com/arkt/mke2fs" "$UPD_TEMP_FOLDER/mke2fs"
chmod 0777 "$UPD_TEMP_FOLDER/mke2fs"

if grep -q "^#!/" "$UPD_TEMP_FOLDER/updater-script"; then
    . "$UPD_TEMP_FOLDER/updater-script" "$@"
    . "$CONFIG_FILE"
else
    ui_print "Error: updater-script is not a shell script"
    exit 1
fi
exit $?